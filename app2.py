import streamlit as st
import pandas as pd
import plotly.express as px

# ===========================
# CONFIGURATION GLOBALE
# ===========================
st.set_page_config(
    page_title="üìä Dashboard Analytique HEM Dakar", 
    layout="wide",
    page_icon="üìä"
)

# Style CSS personnalis√©
st.markdown("""
<style>
    .main-header {font-size: 2.5rem; color: #003366; font-weight: bold; text-align: center;}
    .section-header {font-size: 1.8rem; color: #0066CC; margin-top: 2rem;}
    .info-box {background-color: #F0F8FF; padding: 1rem; border-radius: 0.5rem; margin: 1rem 0;}
    .data-source {font-style: italic; color: #666; margin-bottom: 1rem;}
</style>
""", unsafe_allow_html=True)

# ===========================
# FONCTIONS UTILITAIRES
# ===========================
def load_csv_from_github(repo_base_url, file_list, sep=","):
    """
    Charge les fichiers CSV depuis GitHub et retourne un dictionnaire de DataFrames
    
    Args:
        repo_base_url (str): URL de base du d√©p√¥t GitHub
        file_list (list): Liste des noms de fichiers √† charger
        sep (str): S√©parateur CSV (par d√©faut ',')
    
    Returns:
        dict: Dictionnaire de DataFrames avec les noms de fichiers comme cl√©s
    """
    dfs = {}
    for filename in file_list:
        url = f"{repo_base_url}/{filename}"
        try:
            df = pd.read_csv(url, sep=sep)
            # Normalisation des noms de colonnes
            df.columns = df.columns.str.strip().str.lower()
            dfs[filename.replace(".csv", "").lower()] = df
            st.sidebar.success(f"‚úÖ {filename} charg√©")
        except Exception as e:
            st.sidebar.error(f"‚ùå Erreur chargement {filename} : {e}")
    return dfs

def display_data_info(df, name):
    """
    Affiche des informations d√©taill√©es sur un DataFrame
    
    Args:
        df (DataFrame): DataFrame √† analyser
        name (str): Nom du dataset
    """
    st.markdown(f"<div class='section-header'>üìä Dataset: {name}</div>", unsafe_allow_html=True)
    
    # Informations de base
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Lignes", df.shape[0])
    with col2:
        st.metric("Colonnes", df.shape[1])
    with col3:
        st.metric("Valeurs manquantes", df.isna().sum().sum())
    
    # Aper√ßu des donn√©es
    with st.expander("üëÄ Aper√ßu des donn√©es"):
        st.dataframe(df.head(10))
    
    # Statistiques descriptives
    with st.expander("üìä Statistiques descriptives"):
        st.dataframe(df.describe(include='all'))
    
    # Informations sur les types de donn√©es
    with st.expander("üîç Types de donn√©es"):
        dtype_df = pd.DataFrame({
            'Colonne': df.columns,
            'Type': df.dtypes.values,
            'Valeurs uniques': [df[col].nunique() for col in df.columns]
        })
        st.dataframe(dtype_df)

def explore_categorical_data(df, col, name):
    """
    Explore les donn√©es cat√©gorielles avec visualisations
    
    Args:
        df (DataFrame): DataFrame source
        col (str): Colonne cat√©gorielle √† analyser
        name (str): Nom du dataset
    """
    st.markdown(f"#### üìå Analyse de: {col}")
    
    # R√©partition des valeurs
    value_counts = df[col].value_counts()
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**R√©partition des valeurs:**")
        st.dataframe(value_counts)
    
    with col2:
        fig = px.pie(
            values=value_counts.values, 
            names=value_counts.index,
            title=f"R√©partition de {col} ({name})"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    st.info("üí° Ce graphique circulaire montre la proportion de chaque cat√©gorie dans la variable s√©lectionn√©e.")

def explore_numerical_data(df, col, name):
    """
    Explore les donn√©es num√©riques avec visualisations
    
    Args:
        df (DataFrame): DataFrame source
        col (str): Colonne num√©rique √† analyser
        name (str): Nom du dataset
    """
    st.markdown(f"#### üìå Analyse de: {col}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Histogramme
        fig_hist = px.histogram(
            df, x=col, 
            title=f"Distribution de {col}",
            color_discrete_sequence=['#FF9933'],
            nbins=20
        )
        st.plotly_chart(fig_hist, use_container_width=True)
        st.info("üí° L'histogramme montre la distribution des valeurs et leur fr√©quence.")
    
    with col2:
        # Boxplot
        fig_box = px.box(
            df, y=col, 
            title=f"Boxplot de {col}",
            color_discrete_sequence=['#3399FF']
        )
        st.plotly_chart(fig_box, use_container_width=True)
        st.info("üí° Le boxplot montre la m√©diane, les quartiles et les valeurs aberrantes.")

def calculate_kpi_interactive(df_kpi):
    """
    Calcule et affiche les KPI de mani√®re interactive
    
    Args:
        df_kpi (DataFrame): DataFrame contenant les indicateurs de performance
    """
    st.markdown("<div class='section-header'>üí∞ Indicateurs de Performance par Formation</div>", unsafe_allow_html=True)
    
    # V√©rification des colonnes requises
    required_cols = ['id_formation', 'ca_total_millions', 'cout_total_professeur_millions']
    if not all(col in df_kpi.columns for col in required_cols):
        st.error(f"Le fichier Fait_KPI.csv doit contenir les colonnes : {required_cols}")
        st.write("Colonnes disponibles :", df_kpi.columns.tolist())
        return
    
    # Renommer les colonnes pour simplifier
    df_kpi = df_kpi.rename(columns={
        'ca_total_millions': 'ca',
        'cout_total_professeur_millions': 'cout'
    })
    
    # Calcul des agr√©gations par formation
    kpi_summary = df_kpi.groupby('id_formation').agg(
        CA=('ca', 'sum'),
        Cout=('cout', 'sum'),
        Marge=('ca', 'sum') - ('cout', 'sum')
    ).reset_index()
    
    # Filtre interactif
    st.sidebar.markdown("### üîß Filtres KPI")
    top_n = st.sidebar.slider(
        "Nombre de formations √† afficher", 
        min_value=1, 
        max_value=len(kpi_summary), 
        value=min(10, len(kpi_summary))
    
    kpi_top = kpi_summary.sort_values('CA', ascending=False).head(top_n)
    
    # M√©triques globales
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("CA Total (millions)", f"{kpi_summary['CA'].sum():.2f}")
    with col2:
        st.metric("Co√ªt Total (millions)", f"{kpi_summary['Cout'].sum():.2f}")
    with col3:
        marge_totale = kpi_summary['CA'].sum() - kpi_summary['Cout'].sum()
        st.metric("Marge Totale (millions)", f"{marge_totale:.2f}")
    
    # Tableau de donn√©es
    with st.expander("üìã Donn√©es d√©taill√©es"):
        st.dataframe(kpi_top)
    
    # Visualisations
    col1, col2 = st.columns(2)
    
    with col1:
        fig_ca = px.bar(
            kpi_top, x='id_formation', y='CA',
            title="üíπ Chiffre d'Affaires par Formation",
            color='CA', 
            color_continuous_scale='Oranges',
            text='CA'
        )
        fig_ca.update_traces(texttemplate='%{text:.2f}', textposition='outside')
        st.plotly_chart(fig_ca, use_container_width=True)
    
    with col2:
        fig_marge = px.bar(
            kpi_top, x='id_formation', y='Marge',
            title="üìà Marge par Formation",
            color='Marge',
            color_continuous_scale='Greens',
            text='Marge'
        )
        fig_marge.update_traces(texttemplate='%{text:.2f}', textposition='outside')
        st.plotly_chart(fig_marge, use_container_width=True)

# ===========================
# INTERFACE PRINCIPALE
# ===========================
def main():
    # En-t√™te principal
    st.markdown("<div class='main-header'>üìä Tableau de Bord Analytique - HEM Dakar</div>", unsafe_allow_html=True)
    st.markdown("""
    <div class='info-box'>
    Ce tableau de bord interactif permet d'explorer les donn√©es acad√©miques et financi√®res de la Haute √âcole de Management de Dakar.
    Utilisez le menu lat√©ral pour naviguer entre les diff√©rentes sections.
    </div>
    """, unsafe_allow_html=True)
    
    # Configuration de la barre lat√©rale
    st.sidebar.title("üìå Navigation")
    menu = st.sidebar.radio("S√©lectionnez une section:", [
        "Introduction", 
        "Donn√©es Brutes", 
        "Donn√©es Trait√©es", 
        "Exploration des Donn√©es", 
        "Indicateurs de Performance"
    ])
    
    # URLs des donn√©es
    repo_base = "https://raw.githubusercontent.com/ABDOULAYEDIOP150/Rapport-de-Stage/main"
    
    # Liste des fichiers
    raw_files = [
        "etudiants_annee_2021.csv", "etudiants_annee_2022.csv",
        "etudiants_annee_2023.csv", "etudiants_annee_2024.csv",
        "professeurs.csv", "gestion_enseignements.csv"
    ]
    
    processed_files = [
        "Dim_Temps.csv", "Etudiant_1.csv", "Fait_KPI.csv",
        "Table_Formation.csv", "Table_Inscription1.csv"
    ]
    
    # Section Introduction
    if menu == "Introduction":
        st.markdown("""
        ## üéØ Contexte du Projet
        
        Ce projet s'inscrit dans le cadre de la transformation num√©rique de la Haute √âcole de Management (HEM) de Dakar.
        L'objectif principal est de d√©velopper un syst√®me d'analyse des performances acad√©miques et financi√®res pour
        am√©liorer le pilotage strat√©gique de l'√©tablissement.
        
        ### üìã Objectifs Sp√©cifiques:
        
        1. **Centralisation des donn√©es** : Int√©grer les donn√©es dispers√©es dans plusieurs syst√®mes
        2. **Nettoyage et pr√©paration** : Assurer la qualit√© et la coh√©rence des donn√©es
        3. **Cr√©ation d'indicateurs** : D√©velopper des KPIs acad√©miques et financiers
        4. **Visualisation** : Cr√©er des tableaux de bord interactifs pour la prise de d√©cision
        
        ### üîÑ Processus de traitement des donn√©es:
        
        Le traitement des donn√©es suit un processus ETL (Extract, Transform, Load):
        
        1. **Extraction** : Collecte des donn√©es brutes depuis diverses sources (fichiers CSV, Excel)
        2. **Transformation** : 
           - Nettoyage (valeurs manquantes, doublons)
           - Standardisation (formats, normalisation)
           - Enrichissement (calcul d'indicateurs, cr√©ation de dimensions)
        3. **Chargement** : Stockage des donn√©es transform√©es pour analyse
        
        ### üõ†Ô∏è Technologies utilis√©es:
        
        - **PySpark** : Pour le traitement distribu√© des donn√©es
        - **Python** : Pour l'analyse et la visualisation
        - **Power BI** : Pour les tableaux de bord avanc√©s
        - **Streamlit** : Pour cette application interactive
        """)
    
    # Section Donn√©es Brutes
    elif menu == "Donn√©es Brutes":
        st.markdown("<div class='section-header'>üìÇ Donn√©es Brutes</div>", unsafe_allow_html=True)
        st.markdown("""
        <div class='info-box'>
        Cette section pr√©sente les donn√©es brutes telles qu'elles sont collect√©es depuis les diff√©rents syst√®mes sources.
        Ces donn√©es n√©cessitent un important travail de nettoyage et de transformation avant analyse.
        </div>
        """, unsafe_allow_html=True)
        
        # Chargement des donn√©es brutes
        raw_dfs = load_csv_from_github(repo_base, raw_files, sep=";")
        
        # Affichage des datasets
        for name, df in raw_dfs.items():
            display_data_info(df, name)
    
    # Section Donn√©es Trait√©es
    elif menu == "Donn√©es Trait√©es":
        st.markdown("<div class='section-header'>üîÑ Donn√©es Trait√©es</div>", unsafe_allow_html=True)
        st.markdown("""
        <div class='info-box'>
        Cette section pr√©sente les donn√©es apr√®s le processus de nettoyage et de transformation. Ces donn√©es sont
        structur√©es selon un sch√©ma en √©toile optimis√© pour l'analyse et la cr√©ation d'indicateurs.
        </div>
        """, unsafe_allow_html=True)
        
        # Chargement des donn√©es trait√©es
        processed_dfs = load_csv_from_github(repo_base, processed_files, sep=",")
        
        # Affichage des datasets
        for name, df in processed_dfs.items():
            display_data_info(df, name)
    
    # Section Exploration des Donn√©es
    elif menu == "Exploration des Donn√©es":
        st.markdown("<div class='section-header'>üîé Exploration des Donn√©es</div>", unsafe_allow_html=True)
        
        # Chargement des donn√©es
        processed_dfs = load_csv_from_github(repo_base, processed_files, sep=",")
        
        # S√©lection du dataset
        dataset_name = st.selectbox(
            "S√©lectionnez un dataset √† explorer:",
            list(processed_dfs.keys())
        )
        
        df = processed_dfs[dataset_name]
        
        # Exploration des variables cat√©gorielles
        categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
        if categorical_cols:
            st.markdown("### üìä Variables Cat√©gorielles")
            selected_cat_col = st.selectbox(
                "S√©lectionnez une variable cat√©gorielle:",
                categorical_cols
            )
            explore_categorical_data(df, selected_cat_col, dataset_name)
        
        # Exploration des variables num√©riques
        numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
        if numerical_cols:
            st.markdown("### üìà Variables Num√©riques")
            selected_num_col = st.selectbox(
                "S√©lectionnez une variable num√©rique:",
                numerical_cols
            )
            explore_numerical_data(df, selected_num_col, dataset_name)
    
    # Section Indicateurs de Performance
    elif menu == "Indicateurs de Performance":
        st.markdown("<div class='section-header'>üìà Indicateurs de Performance</div>", unsafe_allow_html=True)
        st.markdown("""
        <div class='info-box'>
        Cette section pr√©sente les indicateurs cl√©s de performance (KPI) calcul√©s √† partir des donn√©es trait√©es.
        Les indicateurs incluent le chiffre d'affaires, les co√ªts et la marge par formation.
        </div>
        """, unsafe_allow_html=True)
        
        # Chargement des donn√©es KPI
        kpi_dfs = load_csv_from_github(repo_base, ["Fait_KPI.csv"], sep=",")
        df_kpi = kpi_dfs.get("fait_kpi")
        
        if df_kpi is not None:
            calculate_kpi_interactive(df_kpi)
        else:
            st.error("‚ùå Fichier Fait_KPI.csv non trouv√©.")

# ===========================
# POINT D'ENTREE
# ===========================
if __name__ == "__main__":
    main()
